#!/data/data/com.termux/files/usr/bin/env zsh

# config
max_usage=95
alert_usage=75
bar_width=50
# colors
green="\e[1;32m"
red="\e[1;31m"
yellow="\e[1;33m"
BOLD='\033[1m'
NC='\033[0m'

# Pre-build bar components to avoid repeated string operations
# Using the same Unicode characters as original
bar_start="\uee03"
bar_filled="\uee04"
bar_empty="\uee01"
bar_end_full="\uee05"
bar_end_empty="\uee02"

# Single df call with direct processing - avoid storing in array first
printf "\n${BOLD}Disk Usage:${NC}\n"

# Process df output in a single pipeline to minimize subprocess calls
df -H -t sdcardfs -t fuse -t fuse.rclone | tail -n+2 | while IFS= read -r line; do
    # Use parameter expansion instead of external awk/sed for extracting usage
    # Split line into fields using zsh word splitting
    fields=($=line)
    usage_percent="${fields[5]}"
    usage="${usage_percent%\%}"  # Remove % using parameter expansion
    used_space="${fields[3]}"
    total_space="${fields[2]}"
    mount_point="${fields[6]}"

    # Calculate used width once
    used_width=$(( (usage * bar_width) / 100 ))

    # Determine color once using arithmetic comparison
    if (( usage >= max_usage )); then
        color=$red
    elif (( usage >= alert_usage )); then
        color=$yellow
    else
        color=$green
    fi

    # Build bar efficiently
    bar="${color}${bar_start}"

    # Build bar using loops (but more efficiently than original)
    for ((i=0; i<used_width; i++)); do
        bar+="${bar_filled}"
    done

    # Add empty portion
    for ((i=used_width; i<bar_width; i++)); do
        bar+="${bar_empty}"
    done

    # Add end character
    if (( usage == max_usage )); then
        bar+="${bar_end_full}"
    else
        bar+="${bar_end_empty}"
    fi

    bar+="${NC}"

    # Format output using printf instead of awk for better performance
    printf "  %-31s%+3s used out of %+4s\n" "$mount_point" "$used_space" "$total_space"
    printf "  %b\n" "$bar"
done
